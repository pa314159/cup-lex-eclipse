
package pi.eclipse.cle.builders;

import java_cup.runtime.*;

import java.io.*;

parser code
{:
	static public void main(String[] args) throws Exception
	{
		CupOutLex x = new CupOutLex(new FileReader(args[0]));
		CupOut p = new CupOut(x);

		p.parse();
	}

	MarkerTool markerTool = null;

	CupOut(java_cup.runtime.Scanner scanner, MarkerTool markerTool)
	{
		super(scanner);

		this.markerTool = markerTool;
	}
:}

action code
{:
:}

terminal		WARNING, WARNING_AT;
terminal		ERROR, ERROR_AT;
terminal		FATAL, FATAL_AT;
terminal		EOL;
terminal		Integer NUM;
terminal		String ANY;

non terminal	output, output_line;
non terminal	owarning, oerror, ofatal;
non terminal	StringBuilder string;

output			::=	output_line output

				|	output_line

				;
				
output_line		::= owarning EOL
				{:
				:}
				
				|	oerror EOL
				{:
				:}
				
				|	ofatal EOL
				{:
				:}

				|	string EOL
				{:
				:}

				|	error EOL
				{:
					if( parser.markerTool != null ) {
						parser.markerTool.addError("parse error");
					}
					else {
						System.out.println("parse error");
					}
				:}
				;

owarning		::=	WARNING string:s
				{:
					if( parser.markerTool != null ) {
						parser.markerTool.addWarning(s);
					}
					else {
						System.out.println(s);
					}
				:}
				
				|	WARNING_AT NUM:l NUM:c string:s
				{:
					if( parser.markerTool != null ) {
						parser.markerTool.addWarning(s, l);
					}
					else {
						System.out.printf("[%d, %d]: %s\n", l, c, s);
					}
				:}
				
				;

oerror			::=	ERROR string:s
				{:
					if( parser.markerTool != null ) {
						parser.markerTool.addError(s);
					}
					else {
						System.out.println(s);
					}
				:}
				
				|	ERROR_AT NUM:l NUM:c string:s
				{:
					if( parser.markerTool != null ) {
						parser.markerTool.addError(s, l);
					}
					else {
						System.out.printf("[%d, %d]: %s\n", l, c, s);
					}
				:}

				;

ofatal			::=	FATAL string:s
				{:
					if( parser.markerTool != null ) {
						parser.markerTool.addError(s);
					}
					else {
						System.out.println(s);
					}
				:}

				|	FATAL_AT NUM:l NUM:c string:s
				{:
					if( parser.markerTool != null ) {
						parser.markerTool.addError(s, l);
					}
					else {
						System.out.printf("[%d, %d]: %s\n", l, c, s);
					}
				:}

				;
				

string			::=	string:x ANY:c
				{:
					RESULT = x.append(c);
				:}
				
				|	string:x NUM:n
				{:
					RESULT = x.append(n);
				:}
				
				|	ANY:c
				{:
					RESULT = new StringBuilder();
					
					RESULT.append(c);
				:}
				
				|	NUM:n
				{:
					RESULT = new StringBuilder();
					
					RESULT.append(n);
				:}

				;

